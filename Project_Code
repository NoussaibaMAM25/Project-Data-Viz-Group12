---
title: "Group project"
author: "Group 12"
output:
  html_document:
    theme: flatly
    highlight: zenburn
    number_sections: true
    toc: yes
    toc_float: yes
---

```{r, setup, echo=FALSE}
knitr::opts_chunk$set(
  message = FALSE, 
  warning = FALSE, 
  tidy=FALSE,     # display code as typed
  size="small")   # slightly smaller font for code
options(digits = 3)

# default figure size
knitr::opts_chunk$set(
  fig.width=6.75, 
  fig.height=6.75,
  fig.align = "center"
)
```

```{r}
library(dplyr)
library(ggplot2)
library(readr)
library(tidyr)
library(rworldmap)
library(RColorBrewer)
library(viridis)
library(plotly)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(patchwork)
library(mapview)
library(tmap)
library(showtext)
library(ggtext)
library(viridis)
font_add_google("Montserrat", "Montserrat") 
font_add_google("Lato", "Lato")
showtext_auto()
```

# Load the datasets

```{r}
athlete_data <- read.csv("/Users/lysmacbook/Desktop/Group 12 - AM10 Project/athlete_events.csv")

noc_region <- read.csv("/Users/lysmacbook/Desktop/Group 12 - AM10 Project/noc_regions.csv")

data <- merge(athlete_data, noc_region, by = 'NOC') # merge both csv files
```
# Data Cleaning

```{r}
# rename columns to lower case

data <- data %>% 
  
  rename_all(tolower)

# checking missing values for every column

missing_values <- sapply(data, function(x) sum(is.na(x)))

# droping notes column

data <- subset(data , select = -c(notes))

## handle missing values 

data <- data %>%
  
  filter(!is.na(region)) %>% # drop na regions
  
  mutate(age = ifelse(is.na(age), median(age, na.rm = TRUE), age)) %>%  # replace age missing values by median age
  
  group_by(sex) %>%
  
  mutate(
    
    height = ifelse(is.na(height), median(height, na.rm = TRUE), height), # replace height missing values by median height for each gender
    
    weight = ifelse(is.na(weight), median(weight, na.rm = TRUE), weight), # replace weight missing values by median height for each gender
    
    medal = ifelse(is.na(medal), "DNW", medal) # change na to DNW (did not win)
  ) %>%
  
  ungroup()

```


```{r fig1, fig.height = 3, fig.width = 5}

# Calculate summary statistics by Year and Sex for age, height, and weight

summary_stats <- data %>%
  
  group_by(year, sex) %>%
  
  summarise(
    
    Avg_Age = mean(age),
    
    Median_Age = median(age),
    
    SD_Age = sd(age),
    
    Avg_Height = mean(height),
    
    Median_Height = median(height),
    
    SD_Height = sd(height),
    
    Avg_Weight = mean(weight),
    
    Median_Weight = median(weight),
    
    SD_Weight = sd(weight)
  ) %>%
  
  ungroup()

summary_stats

#Average age of atheletes over time by gender
ggplot(summary_stats, aes(x = year, y = Avg_Age)) +
  
  geom_line() +
  
  facet_wrap(~sex)+
  
  labs(title = 'There is a downward trend for athelet age over time',
       
       subtitle = "Average age of atheletes over time by gender",
       
       x = NULL,
       
       y = 'Age') +
  
  theme_bw() +
  
  theme(
    plot.title = element_text(size = 16),
    
    plot.subtitle = element_text(size = 12),
    
    panel.grid.major = element_line(color = "grey80")
  )
```

```{r fig2, fig.height = 3, fig.width = 8}
# plotting average Height by gender

ggplot(summary_stats, aes(x = sex, y = Avg_Height)) +
  
  geom_boxplot() +
  
  labs(title = 'Median heights are 168cm for females and 178cm for males',
       
       subtitle = "Height distribution of atheletes by gender",
       
       x = NULL,
       
       y = 'Average Height (cm)') +
  
  theme_bw() +
  
  theme(
    
    plot.title = element_text(size = 16),
    
    plot.subtitle = element_text(size = 12),
    
    panel.grid.major = element_line(color = "grey80")
  )
  

```

```{r fig3, fig.height = 3, fig.width = 8}
# plotting average weight by gender 

ggplot(summary_stats, aes(x = sex, y = Avg_Weight)) +
  
  geom_boxplot() +
  
  labs(title = 'Median Weights are 57kg for females and 73kg for males',
       
       subtitle = 'Weight Distribution of Athletes by Gender',
       
       x = NULL,
       
       y = 'Average Weight (kg)') +
  theme_bw() +
  
  theme(
    plot.title = element_text(size = 16),
    
    plot.subtitle = element_text(size = 12),
    
    panel.grid.major = element_line(color = "grey80")
  )

```

```{r fig4, fig.height = 3, fig.width = 8}

# plotting distribution of athletes ages

ggplot(data, aes(x = age)) +
  
  geom_histogram(binwidth = 1, fill = 'skyblue', color = 'black') +
  
  labs(title = 'Most of athletes are around 24 years old',
       
       subtitle = 'Distribution of athelete ages',
       
       x = 'Age',
       
       y = 'Count') +
  theme_bw() +
  
  theme(
    plot.title = element_text(size = 16),
    
    plot.subtitle = element_text(size = 12),
    
    panel.grid.major = element_line(color = "grey80")
  )

```

```{r fig5, fig.height = 3, fig.width = 8}
#plotting athletes age distribution over time

ggplot(data, aes(x = factor(year), y = age)) +
  
  geom_boxplot(outlier.shape = NA, fill = 'skyblue') +
  
  labs(title = 'The age trend for athelets is constant over time',
       
       subtitle = 'Athletes age distribution over time',
       
       x = NULL,
       
       y = 'Age') +
  
  theme_bw() +
  
  theme(
    plot.title = element_text(size = 16),
    
    axis.text.x = element_text(angle = 45, hjust = 1),
    
    plot.subtitle = element_text(size = 12),
    
    panel.grid.major = element_line(color = "grey80")
  )

```
# Country level analysis

```{r fig6, fig.height = 3, fig.width = 8}

# computing total medals by country
medals_by_country <- data %>%
  
  filter(medal %in% c('Gold', 'Silver', 'Bronze')) %>%
  
  group_by(region) %>%
  
  summarise(Total_Medals = n()) %>%
  
  arrange(desc(Total_Medals)) %>%
  
  top_n(10, Total_Medals)

top_countries <- medals_by_country$region

# Medal counts for top countries
country_medals <- data %>%
  
  filter(region %in% top_countries, medal %in% c('Gold', 'Silver', 'Bronze')) %>%
  
  group_by(region, medal) %>%
  
  summarise(count = n()) %>%
  
  spread(medal, count, fill = 0)

# Plotting medal counts by country

country_medals_long <- country_medals %>%
  
  gather(medal, count, -region)

ggplot(country_medals_long, aes(x = reorder(region, -count), y = count, fill = medal)) +
  
  geom_bar(stat = 'identity' , position = "dodge") +
  
  coord_flip() +
  
  scale_fill_manual(values = c('Gold' = 'gold', 'Silver' = '#C0C0C0', 'Bronze' = 'sienna4')) +
  
  labs(title = 'The USA has won most of medals',
       
       subtitle = 'Medal Counts for Top 10 Countries',
       
       x = NULL,
       
       y = 'Number of Medals') +
  
  theme_bw() +
  
  theme(
    plot.title = element_text(size = 16),
  
    plot.subtitle = element_text(size = 12),
    
    panel.grid.major = element_line(color = "grey80")
  )

```

```{r fig7, fig.height = 3, fig.width = 8}

# Average age, height, weight by country

country_demographics <- data %>%
  
  filter(region %in% top_countries) %>%
  
  group_by(region) %>%
  
  summarise(
    Avg_Age = mean(age),
    
    Avg_Height = mean(height),
    
    Avg_Weight = mean(weight)
  )

# Plotting average age by region for top winning countries

ggplot(country_demographics, aes(x = reorder(region, -Avg_Age), y = Avg_Age)) +
  
  geom_bar(stat = 'identity') +
  
  coord_flip() +
  
  labs(title = 'Average age is similar between top winning countries',
       
       subtitle = 'Average age of athletes by country',
       
       x = NULL,
       
       y = 'Average Age') +
  
  theme_bw() +
  
  theme(
    plot.title = element_text(size = 16),
    
    plot.subtitle = element_text(size = 12),
    
    panel.grid.major = element_line(color = "grey80")
  )
```

```{r fig8, fig.height = 3, fig.width = 8}

# computing the number of winners by gender for the top winning countries

data_summary <- data %>%
  
  filter(region %in% top_countries, medal %in% c('Gold', 'Silver', 'Bronze')) %>%
  
  group_by(region, sex) %>%
  
  summarise(count = n())

# Create the bar plot

ggplot(data_summary, aes(y = region, x = count, fill = sex)) +
  
  geom_bar(stat = 'identity', position = 'dodge') +
  
  labs(
    title = "Most medal winners are males",
    
    subtitle = "Top Medal-Winning Countries by Gender",
    
    x = "Number of Medals",
    
    y = NULL,
    
    fill = "Gender") +
  
  theme_bw() +
  
  theme(
    plot.title = element_text(size = 16),
    
    plot.subtitle = element_text(size = 12),
    
    panel.grid.major = element_line(color = "grey80")
  )
```

```{r fig9, fig.height = 3, fig.width = 8}

# computing the females participants percenatges for each of the top winning countries

gender_distribution <- data %>%
  
  filter(region %in% top_countries) %>%
  
  group_by(region, sex) %>%
  
  summarise(count = n()) %>%
  
  spread(sex, count, fill = 0) %>%
  
  mutate(Total = F + M,
         
         Female_Percentage = F / Total * 100)

# Plotting female participation in the top winning countries

ggplot(gender_distribution, aes(x = reorder(region, -Female_Percentage), y = Female_Percentage)) +
  
  geom_bar(stat = 'identity', fill = 'hotpink') +
  
  coord_flip() +
  
  labs(title = 'Canada has most female athletes participation',
       
       subtitle = 'Female Athlete Participation by Country in %',
       
       x = NULL,
       
       y = 'Female Participation (%)') +
  
  theme_bw() +
  
  theme(
    plot.title = element_text(size = 16),
    
    plot.subtitle = element_text(size = 12),
    
    panel.grid.major = element_line(color = "grey80")
  )

```

```{r fig10, fig.height = 3, fig.width = 8}

# Aggregate total medals by country

medals_map_data <- data %>%
  
  filter(medal %in% c('Gold', 'Silver', 'Bronze')) %>%
  
  group_by(region) %>%
  
  summarise(Total_Medals = n())

# Get world map data
world_map <- map_data('world')


map_data_merged <- world_map %>%
  
  left_join(medals_map_data, by = 'region')

# Create the world map

plotly_map <- ggplot(map_data_merged, aes(long, lat, group = group, fill = Total_Medals, text = region)) +
  
  geom_polygon(color = 'gray70') +
  
  scale_fill_viridis(option = 'plasma', na.value = 'grey90') +
  
  coord_quickmap() +
  
  theme_void() +
  
  labs(title = 'Total Olympic Medals by Country',
       
       fill = 'Total Medals') +
  
  theme(legend.position = 'bottom')

# Convert to interactive plotly object

ggplotly(plotly_map, tooltip = c('text', 'fill'))

```

```{r fig11, fig.height = 3, fig.width = 8}

# Aggregate athlete counts by country 

participation_data <- data %>%
  
  group_by(region) %>%
  
  summarise(Athletes = n_distinct(id))

# Prepare map data 
map_data <- world_map %>%
  
  left_join(participation_data, by = 'region')

# Plotting the map for the selected year

p2 <- ggplot(map_data, aes(long, lat, group = group, text = region)) +
  
  geom_polygon(aes(fill = Athletes), color = 'gray70') +
  
  scale_fill_viridis(option = 'plasma', na.value = 'grey90') +
  
  theme_void() +
  
  labs(title = paste('Number of Participants by Country'),
       
       fill = 'Number of Athletes') +
  
  theme(legend.position = 'bottom')

ggplotly(p2, tooltip = c('text', 'fill'))
```

```{r fig12, fig.height = 3, fig.width = 8}

# Calculate total gold medals by athlete

top_athletes <- data %>%

  filter(medal == "Gold") %>%
  
  group_by(name) %>%
  
  summarize(Total_Gold_Medals = n()) %>%
  
  arrange(desc(Total_Gold_Medals)) %>%
  
  slice(1:10)

# Plot top athletes by gold medals won

ggplot(top_athletes, aes(x = reorder(name, Total_Gold_Medals), y = Total_Gold_Medals)) +
  
  geom_bar(stat = "identity", fill = "gold") +
  
  coord_flip() +
  
  labs(title = "Michaedl Fred Phleps has won more than 20 medals!",
       
       subtitle = "Top 10 athletes by gold medals won",
       
       x = "Athlete",
       
       y = "Gold Medals") +
  
  theme_bw() +
  
  theme(
    
    plot.title = element_text(size = 10),
    
    plot.subtitle = element_text(size = 8),
    
    panel.grid.major = element_line(color = "grey80")
  )

```
```{r fig13, fig.height = 3, fig.width = 8}

# Athlete counts by year and gender
gender_participation <- data %>%
  
  group_by(year, sex) %>%
  
  summarise(Participants = n_distinct(id))

# Plotting participation over time

ggplot(gender_participation, aes(x = year, y = Participants, color = sex)) +
  
  geom_line(size = 0.5) +
  
  labs(title = 'Males tend to participate more than females over time',
       
       subtitle = 'Athlete Participation Over Time by Gender',
       
       x = 'Year',
       
       y = 'Number of Athletes') +
  
  theme_bw() +
  
  theme(
    plot.title = element_text(size = 16),
    
    plot.subtitle = element_text(size = 12),
    
    panel.grid.major = element_line(color = "grey80")
  )
```

```{r fig14, fig.height = 3, fig.width = 8}

# Medal counts by gender

gender_medals <- data %>%
  
  filter(medal %in% c('Gold', 'Silver', 'Bronze')) %>%
  
  group_by(sex, medal) %>%
  
  summarise(Count = n()) %>%
  
  spread(medal, Count, fill = 0)

# Bar plot of medals by gender
gender_medals_long <- gender_medals %>%
  
  gather(medal, Count, -sex)

ggplot(gender_medals_long, aes(x = sex, y = Count, fill = medal)) +
  
  geom_bar(stat = 'identity', position = 'dodge') +
  
  labs(title = 'Males won more medals than females',
       
       subtitle = 'Medal Achievements by Gender ',
       
       x = 'Gender',
       
       y = 'Number of Medals') +
  
  scale_fill_manual(values = c('Gold' = 'gold', 'Silver' = '#C0C0C0', 'Bronze' = 'sienna4')) +
  
  theme_bw() +
  
  theme(
    
    plot.title = element_text(size = 16),
    
    plot.subtitle = element_text(size = 12),
    
    panel.grid.major = element_line(color = "grey80")
  )

```

# Host vs Other Countries 


```{r}
# Load Dataset
olympics <- read.csv("~/Desktop/olympic_all.csv")

# Summer olympics only 
olympics <- olympics %>%
  filter(season == "summer")

# Remove 1906 fake olympics
olympics <- olympics %>%
  filter(year != "1906")

# Replace all instances of "Great Britain" with "United Kingdom" in the 'country' column
olympics$country <- recode(olympics$country, "Great Britain" = "United Kingdom")


# Create a dataframe for host countries
hosts <- data.frame(
  Year = c(1896, 1900, 1904, 1908, 1912, 1920, 1924, 1928, 1932, 
           1936, 1948, 1952, 1956, 1960, 1964, 1968, 1972, 
           1976, 1980, 1984, 1988, 1992, 1996, 2000, 2004, 2008, 2012, 
           2016, 2020, 2024),
  Host_City = c("Athens", "Paris", "St. Louis", "London", "Stockholm", 
                "Antwerp", "Paris", "Amsterdam", "Los Angeles", 
                "Berlin", "London", "Helsinki", 
                "Melbourne", "Rome", "Tokyo", 
                "Mexico City", "Munich", "Montreal", "Moscow", "Los Angeles", 
                "Seoul", "Barcelona", "Atlanta", "Sydney", "Athens", "Beijing", 
                "London", "Rio de Janeiro", "Tokyo", "Paris"),
  Host_Country = c("Greece", "France", "United States", "United Kingdom", 
                   "Sweden", "Belgium", "France", "Netherlands", 
                   "United States", "Germany", 
                   "United Kingdom", "Finland", 
                   "Australia", "Italy", "Japan", 
                   "Mexico", "West Germany", "Canada", "Soviet Union", 
                   "United States", "South Korea", "Spain", "United States", 
                   "Australia", "Greece", "China", "United Kingdom", "Brazil", 
                   "Japan", "France")
)


# Merge the datasets based on the 'Year' column from hosts and 'year' column from olympics
olympics <- olympics %>%
  left_join(hosts, by = c("year" = "Year"))
  
# Create a new column to check if the country was hosting
olympics$Is_Hosting <- ifelse(olympics$country == olympics$Host_Country, TRUE, FALSE)

merged_data <- olympics

# Filter to include only rows where a medal was won
medals_data <- olympics %>% filter(!is.na(medal))

# Group by country and hosting status, then calculate the total number of medals won
medal_counts <- medals_data %>%
  group_by(country, Is_Hosting) %>%
  summarise(Medal_Count = n(), .groups = 'drop')

# Calculate total medals won by each country when hosting and not hosting
medal_totals <- medals_data %>%
  group_by(country, Is_Hosting) %>%
  summarise(Total_Medals = n(), .groups = 'drop')

# Calculate the number of participation years and the number of hosting years for each country
participation_years <- olympics %>%
  group_by(country, Is_Hosting) %>%
  summarise(Years = n_distinct(year), .groups = 'drop')

# Merge the totals and participation years
medal_summary <- merge(medal_totals, participation_years, by = c("country", "Is_Hosting"))

# Calculate the averages
medal_averages <- medal_summary %>%
  mutate(Average_Medals = ifelse(Is_Hosting, Total_Medals / Years, Total_Medals / Years))


# Pivot the data to get 'Not Hosting' and 'Hosting' columns
pivot_data <- medal_averages %>%
  pivot_wider(names_from = Is_Hosting, values_from = Average_Medals, values_fill = 0) %>%
  rename(Not_Hosting = `FALSE`, Hosting = `TRUE`)

# Filter for the 5 most recent host countries
recent_hosts <- c("France", "Japan", "Brazil", "United Kingdom", "China")
pivot_data <- pivot_data %>% filter(country %in% recent_hosts)

# Make averages df
averages_df <- pivot_data %>%
  group_by(country) %>%
  summarise(
    Hosting_Average = max(Hosting, na.rm = TRUE),
    Non_Hosting_Average = max(Not_Hosting, na.rm = TRUE)
  )

```


```{r}
# Filter the data for France
france_data <- olympics %>% filter(country == "France")

# Calculate the total number of medals won by France for each year
medals_per_year <- france_data %>%
  filter(!is.na(medal)) %>%
  group_by(year) %>%
  summarise(Total_Medals = n(), Is_Hosting = any(Host_Country == "France"))

# Create the bar plot
ggplot(medals_per_year, aes(x = year, y = Total_Medals, fill = Is_Hosting)) +
  geom_bar(stat = "identity", color = "black") +
  scale_fill_manual(values = c("TRUE" = "#ef3b2c", "FALSE" = "darkslategray"), labels = c("Not Hosting", "Hosting")) +
  labs(
    title = "France at the Olympics: A Medal Surge When Hosting",
    subtitle = "Medals won by France in the Summer Olympics Over Time",
       caption = "Source: Sports Reference",
    x = NULL,
    y = NULL,
    fill = ""
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(family = "Lato", size = 14, face = "bold"),
    plot.subtitle = element_text(family = "Lato", size = 10),
    plot.caption = element_text(family = "Lato", size = 7, color = "grey30"),
    axis.title = element_text(family = "Lato"),
    axis.text = element_text(family = "Lato", size = 8),
    legend.text = element_text(family = "Lato"), 
    plot.title.position = "plot", 
    legend.position = "top"
  )

```



```{r}
# Filter the data for United Kingdom
United_Kingdom_data <- olympics %>% filter(country == "United Kingdom")

# Calculate the total number of medals won by United Kingdom for each year
medals_per_year <- United_Kingdom_data %>%
  filter(!is.na(medal)) %>%
  group_by(year) %>%
  summarise(Total_Medals = n(), Is_Hosting = any(Host_Country == "United Kingdom"))

# Create the bar plot
ggplot(medals_per_year, aes(x = year, y = Total_Medals, fill = Is_Hosting)) +
  geom_bar(stat = "identity", color = "black") +
  scale_fill_manual(values = c("TRUE" = "#ef3b2c", "FALSE" = "darkslategray"), labels = c("Not Hosting", "Hosting")) +
  labs(
    title = "United Kingdom at the Olympics: A Medal Surge When Hosting",
    subtitle = "Medals won by United Kingdom in the Summer Olympics Over Time",
    caption = "Source: Sports Reference",
    x = NULL,
    y = NULL,
    fill = ""
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(family = "Lato", size = 14, face = "bold"),
    plot.subtitle = element_text(family = "Lato", size = 10),
    plot.caption = element_text(family = "Lato", size = 7, color = "grey30"),
    axis.title = element_text(family = "Lato"),
    axis.text = element_text(family = "Lato", size = 8),
    legend.text = element_text(family = "Lato"), 
    plot.title.position = "plot",
    legend.position = "top"
  )
```
```{r}
merged_data <- olympics

# Add a column to check if the country was hosting
merged_data$Is_Hosting <- ifelse(merged_data$country == merged_data$Host_Country, "Host Medals", "Others")

# Filter data to include only rows where a medal was won
medals_data <- merged_data %>%
  filter(!is.na(medal)) %>%
  group_by(year, country, Is_Hosting) %>%
  summarise(Total_Medals = n(), .groups = "drop")

# Create the scatter plot
ggplot(medals_data, aes(x = year, y = Total_Medals, color = Is_Hosting)) +
  geom_point(size = 3, alpha = 0.8) +
  scale_color_manual(values = c("Host Medals" = "#ef3b2c", "Others" = "darkslategray")) +
  labs(
    title = "Olympic Medals by Country: Bet on the Host",
    subtitle = "Total medals won by countries at the Summer Olympics",
    caption = "Source: Sports Reference",
    x = NULL,
    y = NULL,
    color = NULL
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(family = "Lato", size = 14, face = "bold"),
    plot.subtitle = element_text(family = "Lato", size = 10),
    plot.caption = element_text(family = "Lato", size = 7, color = "grey30"),
    axis.title = element_text(family = "Lato"),
    axis.text = element_text(family = "Lato", size = 8),
    legend.text = element_text(family = "Lato"), 
    plot.title.position = "plot",
    legend.position = "top"
  )

    
```

```{r}

ggplot(averages_df) +
  # Add connecting lines between Non-Hosting and Hosting points
  geom_segment(aes(x = Non_Hosting_Average, xend = Hosting_Average, y = country, yend = country),
               color = "gray70", size = 1) +
  # Add points for Non-Hosting averages
  geom_point(aes(x = Non_Hosting_Average, y = country, color = "Not Hosting"), size = 5) +
  # Add points for Hosting averages
  geom_point(aes(x = Hosting_Average, y = country, color = "Hosting"), size = 5) +
  # Add titles and axis labels
  labs(
    title = "Hosting the Olympics: A Boost for Medal Counts",
    subtitle = "Average medals won at the Summer Olympic games",
    caption = "Source: Sports Reference",
    x = "Total Medals",
    y = NULL,
    color = ""
  ) +
  # Customize the x-axis and expand the range
  scale_x_continuous(breaks = seq(0, 400, 50), expand = c(0, 50)) +
  # Customize colors in the legend
  scale_color_manual(values = c("Not Hosting" = "darkslategray", "Hosting" = "#ef3b2c")) +
  # Minimal theme for clean visualization
  theme_minimal() +
  theme(
    plot.title = element_text(family = "Lato", size = 14, face = "bold"),
    plot.subtitle = element_text(family = "Lato", size = 10),
    plot.caption = element_text(family = "Lato", size = 7, color = "grey30"),
    axis.ticks.y = element_blank(),
    panel.grid.major.y = element_blank(),
    legend.position = "top", # Position the legend on top
    axis.text.x = element_text(family = "Lato", size = 8),
    axis.text.y = element_text(family = "Lato", size = 10),
    plot.title.position = "plot"
  )

```

```{r}

# Read the data
data <- merged_data

# Preprocess data
data <- data %>%
  mutate(
    Medal_Won = ifelse(!is.na(medal), 1, 0),  # Binary variable: 1 if medal won, else 0
    Is_Hosting = ifelse(Is_Hosting == "Host Medals", 1, 0)  # Binary variable: 1 for Host, 0 otherwise
  )

# T-test
host_medals <- data %>% filter(Is_Hosting == 1) %>% pull(Medal_Won)
others_medals <- data %>% filter(Is_Hosting == 0) %>% pull(Medal_Won)

t_test_result <- t.test(host_medals, others_medals, var.equal = TRUE)
print(t_test_result)


```

```{r}

data <- merged_data

# Preprocess data
data <- data %>%
  mutate(
    Medal_Won = ifelse(!is.na(medal), 1, 0),  # Binary variable: 1 if medal won, else 0
    Is_Hosting = ifelse(Is_Hosting == "Host Medals", "Hosting", "Not Hosting")  # Label for clarity
  ) %>%
  group_by(year, Is_Hosting) %>%
  summarise(Total_Medals = sum(Medal_Won), .groups = "drop") %>%
  mutate(Log_Total_Medals = log(Total_Medals + 1))  # Log-transform to handle 0 values

# Calculate mean and standard error for each group
summary_stats <- data %>%
  group_by(Is_Hosting) %>%
  summarise(
    Mean = mean(Log_Total_Medals, na.rm = TRUE),
    SE = sd(Log_Total_Medals, na.rm = TRUE) / sqrt(n())
  )

# Add ±3 SE to the summary stats
summary_stats <- summary_stats %>%
  mutate(
    Lower = Mean - 3 * SE,
    Upper = Mean + 3 * SE
  )

# Create the density plot with SE bars
ggplot(data, aes(x = Log_Total_Medals, fill = Is_Hosting)) +
  geom_density(alpha = 0.7) +
  geom_vline(data = summary_stats, aes(xintercept = Mean, color = Is_Hosting), linetype = "dashed") +
  geom_vline(data = summary_stats, aes(xintercept = Lower, color = Is_Hosting), linetype = "dotted") +
  geom_vline(data = summary_stats, aes(xintercept = Upper, color = Is_Hosting), linetype = "dotted") +
  scale_fill_manual(
    values = c("Hosting" = "darkslategray", "Not Hosting" = "#ef3b2c")
  ) +
  scale_color_manual(
    values = c("Hosting" = "darkslategray", "Not Hosting" = "#ef3b2c")
  ) +
  labs(
    title = "Comparing Means - Host vs Non Host Performance",
    subtitle = "Density Plot for Hosting vs Not Hosting with ±3 SE Bars",
    caption = "Source: Sports Reference",
    x = "Natural Log - Total Medals",
    y = "",
    fill = "",
    color = ""
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(family = "Lato", size = 14, face = "bold"),
    plot.subtitle = element_text(family = "Lato", size = 10),
    plot.caption = element_text(family = "Lato", size = 7, color = "grey30"),
    legend.position = "top", # Position the legend on top
    axis.text.x = element_text(family = "Lato", size = 8),
    axis.text.y = element_text(family = "Lato", size = 8),
    plot.title.position = "plot"
  )

```




